/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: nimzu (https://sketchfab.com/nimzuk)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/foxs-islands-163b68e09fcc47618450150be7785907
Title: Fox's islands
*/

import { a } from "@react-spring/three";
import { useEffect, useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { ThreeEvent, useFrame, useThree } from "@react-three/fiber";
import { Group, Mesh, BufferGeometry, Material } from "three";

import * as THREE from 'three'
import { GLTF } from 'three-stdlib'

import islandScene from "../assets/3d/island.glb";
import { useInput } from "../hooks/useInput";

type GLTFResult = GLTF & {
  nodes: Record<string, THREE.Mesh>;
  materials: Record<string, THREE.Material>;
};

type IslandProps = {
  position: [number, number, number];
  scale: [number, number, number];
  rotation: [number, number, number];
  setCurrentStage: React.Dispatch<React.SetStateAction<number>>;
};

export function adjustIslandForScreenSize(): [number, number, number][] {
  let screenScale: [number, number, number] = [0, 0, 0];
  let screenPosition: [number, number, number] = [0, -6.5, -43.4];
  let rotation: [number, number, number] = [0.1, 4.7, 0];
  if (window.innerWidth < 768) {
    screenScale = [0.9, 0.9, 0.9];
  } else {
    screenScale = [1, 1, 1];
  }

  return [screenScale, screenPosition, rotation];
};

export function Island(props: IslandProps): JSX.Element {
  const { setCurrentStage, ...groupProps } = props;
  const { nodes, materials } = useGLTF(islandScene) as GLTFResult;
  const islandRef = useRef<Group>(null);

  const { getSpeed, isRotating } = useInput();
  const dampingFactor = 0.9;
  const speedRef = useRef(0);

  useFrame(() => {
    if (!islandRef.current) return;

    let speed = getSpeed();

    if (!isRotating) {
      speedRef.current *= dampingFactor;
      if (Math.abs(speedRef.current) < 0.001) speedRef.current = 0;
    } else {
      speedRef.current = speed;
    }

    islandRef.current.rotation.y += speedRef.current;
  });

  useFrame(() => {
    const rotation = islandRef.current?.rotation.y || 0;
    const normalizedRotation = ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);

    switch (true) {
      case normalizedRotation >= 5.45 && normalizedRotation <= 5.85:
        setCurrentStage(4);
        break;
      case normalizedRotation >= 0.85 && normalizedRotation <= 1.3:
        setCurrentStage(3);
        break;
      case normalizedRotation >= 2.4 && normalizedRotation <= 2.6:
        setCurrentStage(2);
        break;
      case normalizedRotation >= 4.25 && normalizedRotation <= 4.75:
        setCurrentStage(1);
        break;
      default:
        setCurrentStage(0);
    }
  });

  return (
    <a.group ref = {islandRef} {...groupProps}>
      <mesh
        geometry={nodes.polySurface944_tree_body_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={nodes.polySurface945_tree1_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={nodes.polySurface946_tree2_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={nodes.polySurface947_tree1_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={nodes.polySurface948_tree_body_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={nodes.polySurface949_tree_body_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={nodes.pCube11_rocks1_0.geometry}
        material={materials.PaletteMaterial001}
      />
    </a.group>
  )
}
